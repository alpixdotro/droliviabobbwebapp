@page "/patients"
@using BlazorApp.Client.Services;
@using BlazorApp.Shared.Data.Models;
@using Newtonsoft.Json;
@using System.Text;
@using System.Threading.Tasks;
@inject PatientService PatientService

@inject HttpClient Http

<PageTitle>Patients</PageTitle>
<h1>SWA: Patients |  Database Operations</h1>
<blockquote>
    Open the browser developer tools to see the API responses.
</blockquote>

@if (responseList == null)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}

<MudDataGrid Items="@responseList" Filterable="false" SortMode="@SortMode.None" Groupable="false">
    <Columns>
        <PropertyColumn Property="x => x.FullName" Title="Name" />
        <PropertyColumn Property="x => x.Id" Title="ID" />
        <TemplateColumn CellClass="d-flex justify-end">
            <CellTemplate Context="contextData">
                <MudStack Row>
                    <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Edit" Size="Size.Small" />
                    <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Delete" Size="Size.Small" OnClick="@(() => { if (contextData.Item.Id.HasValue) { _ = Delete(contextData.Item.Id.Value); } else { Console.WriteLine("Cannot delete a patient without an ID"); } })" />
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>


@code {
    List<PatientModel> responseList;
    string responseCreate;

    public class PatientResponse
    {
        public List<PatientModel> Value { get; set; }
    }
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            responseList = await PatientService.GetPatients();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            throw;
        }
    }

    async Task Delete(int id)
    {
        try
        {
            await PatientService.DeletePatient(id);

            // Reload the patients list
            responseList = await PatientService.GetPatients();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            throw;
        }
    }



   
}
