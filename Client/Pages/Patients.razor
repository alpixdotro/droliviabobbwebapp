@page "/patients"
@using BlazorApp.Shared.Data.Models;
@using Newtonsoft.Json;
@using System.Text;
@using System.Threading.Tasks;

@inject HttpClient Http

<PageTitle>Patients</PageTitle>
<h1>SWA: Patients |  Database Operations</h1>
<blockquote>
    Open the browser developer tools to see the API responses.
</blockquote>

@if (responseList == null)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}

<MudDataGrid Items="@responseList" Filterable="false" SortMode="@SortMode.None" Groupable="false">
    <Columns>
        <PropertyColumn Property="x => x.FullName" Title="Name" />
        <PropertyColumn Property="x => x.Id" Title="ID" />
        <TemplateColumn CellClass="d-flex justify-end">
            <CellTemplate Context="contextData">
                <MudStack Row>
                    <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Edit" Size="Size.Small" />
                    <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Delete" Size="Size.Small" OnClick="@(() => { if (contextData.Item.Id.HasValue) { _ = Delete(contextData.Item.Id.Value); } else { Console.WriteLine("Cannot delete a patient without an ID"); } })" />
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>


@code {

    List<Patient> responseList;
    string responseCreate;

    //on initialized
    protected override async Task OnInitializedAsync()
    {
        try
        {
            await ListAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            throw;
        }
    }

    async Task ListAsync()
    {
        try
        {
            var endpoint = "/data-api/rest/Patient";
            var json = await Http.GetStringAsync(endpoint);
            responseList = JsonConvert.DeserializeObject<PatientResponse>(json).Value;
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Network Error: {ex.Message}");
            throw;
        }
        catch (JsonException ex)
        {
            Console.WriteLine($"JSON Parse Error: {ex.Message}");
            throw;
        }
    }

    async Task Create()
    {
        var endpoint = "/data-api/rest/Patient";
        HttpResponseMessage response = null;
        try
        {
            var data = new Patient
                {
                    FirstName = "Olivia",
                    LastName = "Bobb",
                    PhoneNumber = "1234567890",
                    EmailAddress = "test@email.com",
                    DateOfBirth = new DateTime(1990, 1, 1),
                    PersonalId = 1910109260017,
                    Gender = "Female",
                    SpokenLanguage = "English",
                    StreetAddress = "123 Main St",
                    City = "Targu-Mures",
                    StateProvince = "Mures",
                    PostalCode = "540000",
                    DoctorId = 1
                };


            // Use Newtonsoft.Json to serialize the data object to a JSON string
            var jsonString = JsonConvert.SerializeObject(data, new JsonSerializerSettings
                {
                    NullValueHandling = NullValueHandling.Ignore
                });

            var httpContent = new StringContent(jsonString, Encoding.UTF8, "application/json");
            response = await Http.PostAsync(endpoint, httpContent);
            response.EnsureSuccessStatusCode();

            var responseContent = await response.Content.ReadAsStringAsync();
            var result = JsonConvert.DeserializeObject<Patient>(responseContent);

            responseCreate = "Created entry: " + result.EmailAddress;
        }
        catch (HttpRequestException ex)
        {
            var errorContent = response?.Content != null ? await response.Content.ReadAsStringAsync() : "No response content";
            Console.WriteLine($"Error: {ex.Message}. Response content: {errorContent}");
            throw;
        }
        catch (JsonException ex)
        {
            Console.WriteLine($"JSON Parse Error: {ex.Message}");
            throw;
        }
    }

    async Task Delete(int id)
    {
        var endpoint = $"/data-api/rest/Patient/Id/{id}";
        HttpResponseMessage response = null;

        try
        {
            response = await Http.DeleteAsync(endpoint);
            response.EnsureSuccessStatusCode();

            Console.WriteLine("Successfully deleted patient with ID: " + id);

            // Reload the patients list
            await ListAsync();
        }
        catch (HttpRequestException ex)
        {
            var errorContent = response?.Content != null ? await response.Content.ReadAsStringAsync() : "No response content";
            Console.WriteLine($"Error: {ex.Message}. Response content: {errorContent}");
            throw;
        }
    }

    public class PatientResponse
    {
        public List<Patient> Value { get; set; }
    }
}
